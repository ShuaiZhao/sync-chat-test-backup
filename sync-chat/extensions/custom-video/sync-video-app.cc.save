/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2011-2012 University of California, Los Angeles
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Modified from ndn-consumer.h, ndn-producer.h and custom-app.h
 * Author: Xuan Liu <xuan.liu@mail.umkc.edu>
 *
 */

// sync-chat-app.cc

#include "sync-video-app.h"
#include "../custom-apps/sync-client.h"
#include "ns3/ptr.h"
#include "ns3/log.h"
#include "ns3/simulator.h"
#include "ns3/packet.h"

#include "ns3/string.h"
#include "ns3/uinteger.h"
#include "ns3/random-variable.h"
#include "ns3/core-module.h"

#include "ns3/ndn-name.h"
#include "ns3/ndn-app-face.h"
#include "ns3/ndn-interest.h"
#include "ns3/ndn-content-object.h"
#include "ns3/ndnSIM/utils/ndn-fw-hop-count-tag.h"
#include "ns3/ndn-fib.h"

#include <iostream>
#include <fstream>
#include <map>
#include <sstream>
#include <vector>
#include <boost/foreach.hpp>
#include "ns3/onoff-application.h"
#include "ns3/random-variable-stream.h"

NS_LOG_COMPONENT_DEFINE("SyncVideoApp");

namespace ns3 {

NS_OBJECT_ENSURE_REGISTERED(SyncVideoApp);

// register NS-3 type
TypeId SyncVideoApp::GetTypeId() {
	static TypeId tid =
			TypeId("SyncVideoApp")
.SetParent<ndn::App>()
.AddConstructor<SyncVideoApp>()
.AddAttribute("Prefix",
					"Prefix, for which producer has the data", StringValue("/"),
					ndn::MakeNameAccessor(&SyncVideoApp::m_nodePrefix),
					ndn::MakeNameChecker())
.AddAttribute("AccountID",
					"AccoundID for the Application", StringValue("none"),
					MakeStringAccessor(&SyncVideoApp::m_accountId),
					MakeStringChecker())
.AddAttribute("StartSeq",
					"Initial sequence number", IntegerValue(0),
					MakeIntegerAccessor(&SyncVideoApp::m_contentSeq),
					MakeIntegerChecker<uint32_t>())
.AddAttribute("Randomize",
					"Type of send time randomization: none (default), uniform, exponential",
					StringValue("none"),
					MakeStringAccessor(&SyncVideoApp::SetRandomize,
							&SyncVideoApp::GetRandomize), MakeStringChecker())
.AddAttribute(
					"SyncClientID", "The sync proxy ID the client is connected",
					StringValue("none"),
					MakeStringAccessor(&SyncVideoApp::m_syncClientId),
					MakeStringChecker())
.AddAttribute("LeaveTime",
					"When User will leave", IntegerValue(3),
					MakeIntegerAccessor(&SyncVideoApp::m_leaveTime),
					MakeIntegerChecker<uint32_t>())
.AddAttribute ("PacketSize", "The size of packets sent in on state",
						IntegerValue (1470),
						MakeIntegerAccessor (&SyncVideoApp::m_pktSize),
					   MakeIntegerChecker<uint32_t> (1))
.AddAttribute ("OnTime", "A RandomVariableStream used to pick the duration of the 'On' state.",
		  	  	  	  	  DoubleValue (0.0),
		  	  	  	  	  MakeDoubleAccessor  (&SyncVideoApp::m_onTime),
		  	  	  	  	  MakeDoubleChecker<double>())
.AddAttribute ("OffTime", "A RandomVariableStream used to pick the duration of the 'Off' state.",
						StringValue ("ns3::ConstantRandomVariable[Constant=0.0001]"),
						MakePointerAccessor (&SyncVideoApp::m_offTime),
						MakePointerChecker <RandomVariableStream>());
	return tid;
}

// constructor
SyncVideoApp::SyncVideoApp() :
		m_frequency(1), m_start(true), m_random() {
	NS_LOG_FUNCTION_NOARGS ();
	m_offPeriod = true;
	m_activebursts = 0;
	m_lastStartTime = Seconds (0);
	m_gopPosition=0;
	GetGopSize(1);
}

// destructor
SyncVideoApp::~SyncVideoApp() {
	if (m_random)
		delete m_random;
}

//////////////////////////////////////////////////////////////////////////
//                    Start or Stop the application            			//
//////////////////////////////////////////////////////////////////////////

// Processing upon start of the application
void SyncVideoApp::StartApplication() {
	NS_LOG_FUNCTION_NOARGS();
	NS_ASSERT(GetNode()->GetObject<ndn::Fib>() != 0);
	// initialize ndn::App
	ndn::App::StartApplication();

	//NS_LOG_DEBUG("NodeID: " <<GetNode()->GetId());

	// Get Node Name
	Ptr<Node> node = GetNode();
	m_nodeName = Names::FindName(node);
	//NS_LOG_DEBUG("This node's name is "<<m_nodeName);

	Ptr<ndn::Fib> fib = GetNode()->GetObject<ndn::Fib>();

	// Add application prefix to the fib
	Ptr<ndn::fib::Entry> fibEntry = fib->Add(m_nodePrefix, m_face, 0);

	fibEntry->UpdateStatus(m_face, ndn::fib::FaceMetric::NDN_FIB_GREEN);

	NS_LOG_DEBUG("This node's prefix "<<m_nodePrefix);

	ScheduleStartEvent();
}

void SyncVideoApp::GetGopSize(uint32_t startFrom){
	//get gop size from result/log/gop_size.txt and store int into a array
	std::string gop_size_filename="/home/shuai/workspace/ndnsim-sync-chat/sync-chat/results/log/gop_size.txt";
	std::ifstream file(gop_size_filename.c_str());
	if(file.is_open()){
		for(int  i =0; i<10000;  ++i){
				std::string temp;
				file >> temp;
				m_gopSizeArray[i] = atoi(temp.c_str());
				//std::cout<<m_gopSizeArray[i];
				//NS_LOG_INFO("GOP size is: " << m_gopSizeArray[i]);
		}
	}
	//for (int i=0;i<=5;i++)
	//	NS_LOG_INFO("GOP size is: " << m_gopSizeArray[i]);
}


void SyncVideoApp::ScheduleStartEvent(){
	if(m_pktSize != 1){
		NS_LOG_INFO("Video Source");

		uint32_t gop_size = m_gopSizeArray[m_gopPosition];
		m_onTime =12.0/25;

		m_interArrival =12.0/25/static_cast<double>(gop_size);

		Time offInterval = Seconds(m_offTime->GetValue());
		//ExponentialVariable exp(m_offTime->GetValue());
		//NS_LOG_INFO("exp(0.7)=" <<Seconds(exp.GetValue()));
		NS_LOG_INFO("GOP Size is: " << gop_size << " On time: " << m_onTime << " Off_time: " << m_offTime->GetValue()
					<< " inter-arrival: " << m_interArrival << " GOP Position: " << m_gopPosition << " Next GOP: " << m_gopSizeArray[++m_gopPosition]) ;
		m_startStopEvent = Simulator::Schedule (offInterval, &SyncVideoApp::StartSending, this);
	}else{
		NS_LOG_INFO("Video Receiver");
		//m_startStopEvent = Simulator::Schedule (Seconds(200), &SyncVideoApp::StartSending, this);
/*		Time offInterval = Seconds(m_offTime->GetValue());
		m_startStopEvent = Simulator::Schedule (Seconds(m_leaveTime), &SyncAudioApp::StartSending, this);*/
	}
}

void SyncVideoApp::StartSending(){
	//NS_LOG_INFO("startSending");
	//NS_LOG_FUNCTION_NOARGS ();
	m_lastStartTime = Simulator::Now();
	ScheduleNextContent();					// Schedule the send packet event
	ScheduleStopEvent();
}

void
SyncVideoApp::CancelEvents ()
{
	//NS_LOG_FUNCTION_NOARGS ();
	Simulator::Cancel(m_sendContentEvent);
	Simulator::Cancel(m_startStopEvent);
}


void SyncVideoApp::StopSending(){
	//NS_LOG_INFO(this);
	CancelEvents();
	ScheduleStartEvent();
}


void
SyncVideoApp::ScheduleStopEvent()
{
	//NS_LOG_FUNCTION_NOARGS ();
	Time onInterval = Seconds (m_onTime);
	//ExponentialVariable exp(m_onTime);
	//NS_LOG_INFO("exp(0.3)=" <<Seconds(exp.GetValue()));
	m_startStopEvent = Simulator::Schedule(onInterval, &SyncVideoApp::StopSending, this);
}

// Processing when application is stopped
void SyncVideoApp::StopApplication() {
	NS_LOG_FUNCTION_NOARGS ();
	NS_ASSERT(GetNode()->GetObject<ndn::Fib>() != 0);
	// cancel periodic packet generation
	Simulator::Cancel(m_startStopEvent);
	Simulator::Cancel(m_sendContentEvent);

	// cleanup ndn::App
	ndn::App::StopApplication();
}

//////////////////////////////////////////////////////////////////////////
//                    Generate & Send Content		           			//
//////////////////////////////////////////////////////////////////////////

// publish content locally, not to other remote service node
void SyncVideoApp::ScheduleNextContent() {
	if (m_start) {
		//added by shuai
		m_videoContentSeq = 0;
		m_sendContentEvent = Simulator::Schedule(Seconds(m_interArrival), &SyncVideoApp::generateContent, this);
		NS_LOG_INFO(m_nodeName<<": Schedule the first video content generating");
		m_start = false;
	} else if (!m_sendContentEvent.IsRunning()) {
		m_videoContentSeq++;

		m_sendContentEvent = Simulator::Schedule(Seconds(m_interArrival), &SyncVideoApp::generateContent, this);

	}
}

//  Generate Content <contentPrefix, contentSize>
void SyncVideoApp::generateContent() {
	// convert uint32_t to string;
	//NS_LOG_INFO(m_nodeName<<": New-Vieo Content sequence number is "<<m_videoContentSeq);

	//added by shuai
	std::stringstream ss1;
	ss1 << m_videoContentSeq;
	std::string str_VideoContentSeq;
	ss1 >> str_VideoContentSeq;

	//added by shuai
	Ptr<ndn::Name> m_videoContentName = Create<ndn::Name>(m_nodePrefix);
	//NS_LOG_DEBUG(m_nodeName<<": New-Video Content prefix is "<<*m_videoContentName);
	m_videoContentName->Add("chatroom-cona");
	m_videoContentName->Add(m_accountId);
	m_videoContentName->Add("video");
	m_videoContentName->Add(str_VideoContentSeq);

	m_videoContentSize = m_pktSize;
	NS_LOG_INFO(m_nodeName<<": Video prefix is "<<*m_videoContentName<<" and its size is "<<m_videoContentSize);

	m_contentDict[*m_videoContentName] = m_videoContentSize;

	// Get FIB object
	Ptr<ndn::Fib> fib = GetNode()->GetObject<ndn::Fib>();

	Ptr<ndn::fib::Entry> fibEntry1 = fib->Add(m_videoContentName, m_face, 0);
	fibEntry1->UpdateStatus(m_face, ndn::fib::FaceMetric::NDN_FIB_GREEN);
	//NS_LOG_INFO(m_nodeName<<": Video FIB Entry "<< *m_videoContentName);
	GenerateNotificationPrefix(m_videoContentName);

/*	if(Simulator::Now().GetSeconds() >= m_leaveTime)
		SyncVideoApp::StopApplication();*/
}

//////////////////////////////////////////////////////////////////////////
//                    Generate & Send Interest		           			//
//////////////////////////////////////////////////////////////////////////

ndn::InterestHeader SyncVideoApp::GenerateInterestHeader(
		ndn::Name m_interestName) {
	// Create and configure ndn::InterestHeader
	ndn::InterestHeader interestHeader;
	UniformVariable rand(0, std::numeric_limits<uint32_t>::max());
	interestHeader.SetNonce(rand.GetValue());
	interestHeader.SetName(m_interestName);
	interestHeader.SetInterestLifetime(Seconds(1.0));
	NS_LOG_INFO(m_nodeName<<": InterestHeader " << interestHeader);
	return interestHeader;
}

//Sending one Interest packet out
void SyncVideoApp::SendInterest(ndn::Name m_interestName) {
	NS_LOG_INFO(m_nodeName<<": Start sending interest! "<<m_interestName );
	//NS_LOG_INFO(m_nodeName<<": Interest Name" << m_interestName);
	// Create and configure ndn::InterestHeader
	ndn::InterestHeader interestHeader;
	interestHeader = GenerateInterestHeader(m_interestName);
	// NS_LOG_DEBUG (m_nodeName<<": Generate interest for content: " << m_interestName);

	// Create packet and add ndn::InterestHeader

	Ptr<Packet> packet = Create<Packet>();
	packet->AddHeader(interestHeader);

	NS_LOG_INFO (m_nodeName<<": Sending Interest packet for " << m_interestName);

	//ndn::FwHopCountTag hopCountTag;
	//packet->AddPacketTag (hopCountTag);
	//NS_LOG_DEBUG("hopCountTag is "<<hopCountTag.Get());

	// Forward packet to lower (network) layer
	m_protocolHandler(packet);

	// Call trace (for logging purposes)
	m_transmittedInterests(&interestHeader, this, m_face);
}

//////////////////////////////////////////////////////////////////////////
//                    Generate & Send Notification		           			//
//////////////////////////////////////////////////////////////////////////
void SyncVideoApp::GenerateNotificationPrefix(Ptr<ndn::Name> m_contentName) {
/*
	NS_LOG_INFO(m_nodeName<<": Start generating notification prefix:");
	m_outSyncNotificationPrefix.routing_prefix = m_syncClientId; // proxy01 on service router 01
	m_outSyncNotificationPrefix.serviceId = "chatroom-cona";
	m_outSyncNotificationPrefix.m_fingerprint = *m_contentName;
*/

	m_outSyncNotificationPrefix.routing_prefix = m_syncClientId;
	m_outSyncNotificationPrefix.serviceId = "chatroom-cona";
	m_outSyncNotificationPrefix.m_fingerprint = *m_contentName;


	//Take off the first '/' from the content name
	std::string str_fingerprint;
	std::stringstream ss;
	ss << m_outSyncNotificationPrefix.m_fingerprint;
	ss >> str_fingerprint;
	str_fingerprint.erase(0, 1);

	// form the notification interest
	Ptr<ndn::Name> m_syncPrefix = Create<ndn::Name>(
			m_outSyncNotificationPrefix.routing_prefix);
	//NS_LOG_INFO(m_nodeName<<": The notification prefix is "<<*m_syncPrefix);
	m_syncPrefix->Add(m_outSyncNotificationPrefix.serviceId);
	m_syncPrefix->Add(str_fingerprint);

	NS_LOG_INFO(m_nodeName<<": Now: The notification prefix is "<<*m_syncPrefix);
	SendSyncNotification(m_syncPrefix);

}

ndn::InterestHeader SyncVideoApp::GenerateSyncNotificationHeader(
		Ptr<ndn::Name> m_syncPrefix) {
	//NS_LOG_INFO(m_nodeName<<": Generate the notification header");
	//NS_LOG_DEBUG(m_nodeName<<": Sync Notification Prefix is "<<*m_syncPrefix);
	ndn::InterestHeader syncNotificationHeader;
	UniformVariable rand(0, std::numeric_limits<uint32_t>::max());
	syncNotificationHeader.SetNonce(rand.GetValue());
	syncNotificationHeader.SetName(m_syncPrefix);
	syncNotificationHeader.SetInterestLifetime(Seconds(1.0));
	NS_LOG_INFO(m_nodeName<<": notification header " << syncNotificationHeader );
	return syncNotificationHeader;
}

void SyncVideoApp::SendSyncNotification(Ptr<ndn::Name> m_syncPrefix) {
	NS_LOG_DEBUG(m_nodeName<<": Sending video notification to sync client");
	ndn::InterestHeader syncNotificationHeader;
	syncNotificationHeader = GenerateSyncNotificationHeader(m_syncPrefix);

	//NS_LOG_DEBUG(m_nodeName<<": Create the sync notification packet");
	// Create packet and add ndn::syncNotificationHeader
	Ptr<Packet> packet = Create<Packet>();
	packet->AddHeader(syncNotificationHeader);

	// Forward packet to lower (network) layer
	m_protocolHandler(packet);

	// Call trace (for logging purposes)
	m_transmittedInterests(&syncNotificationHeader, this, m_face);
	ScheduleNextContent();
}

////////////////////////////////////////////////////////////////////////
//          			Process incoming packets       			      //
////////////////////////////////////////////////////////////////////////

// Callback that will be called when Interest arrives
void SyncVideoApp::OnInterest(const Ptr<const ndn::InterestHeader> &interest,
		Ptr<Packet> origPacket) {
	ndn::Name interestName = interest->GetName();
	std::list<std::string> subPrefixList = interestName.GetComponents();

	std::stringstream ss2, temp;
	ss2 << interestName;
	std::string str_videoContentName;
	ss2 >> str_videoContentName;
	std::string delimiter = "/";

	std::string s;
	s=str_videoContentName;
	size_t pos = 0;
	std::string token;
	while ((pos = s.find(delimiter)) != std::string::npos) {
		token = s.substr(0, pos);
		//std::cout << token << std::endl;
		s.erase(0, pos + delimiter.length());
	}
	//std::cout << "medie type: " << token <<  std::endl;
	//std::cout << str_audioContentName << std::endl;
	if(token == "audio")
		return;

	NS_LOG_INFO (m_nodeName<<" Received Interest packet  " << interest->GetName ());

		bool isNotification = false;


		int prefixSize = subPrefixList.size();
		if (prefixSize == 3) // notification sent by sync-client has three components
				{
			isNotification = true;
			//NS_LOG_INFO(m_nodeName<<": Received a sync notification from sync-client");
			OnNotification(interest, origPacket);
			return;
		}

		if (!isNotification) { //interest from other UEs
			if (m_contentDict.find(interestName) == m_contentDict.end()) {
				// not found
				NS_LOG_INFO(m_nodeName<<": There is no content matching the interest with name "<< interestName);
			} else {
				NS_LOG_INFO (m_nodeName<<": Received content request Interest packet " << interestName);
				ndn::ContentObjectHeader contentData;
				contentData.SetName(Create<ndn::Name>(interestName)); // data will have the same name as Interests

				ndn::ContentObjectTail trailer; // doesn't require any configuration

				// Create packet and add header and trailer
				//SetRandomize("lognormal");
				//Ptr<Packet> packet = Create<Packet>(m_random->GetValue());

				Ptr<Packet> packet = Create<Packet>(m_pktSize);
				packet->AddHeader(contentData);
				packet->AddTrailer(trailer);

				NS_LOG_INFO (m_nodeName<<": Sending ContentObject packet for " << contentData.GetName () << " contentData " << "  *size* " << m_random->GetValue());
				//NS_LOG_INFO (m_nodeName<<": packet content " << contentData);

				// Forward packet to lower (network) layer
				m_protocolHandler(packet);

				// Call trace (for logging purposes)
				m_transmittedContentObjects(&contentData, packet, this, m_face);
		}
	}
}

// Callback that will be called when Data arrives
void SyncVideoApp::OnContentObject(
		const Ptr<const ndn::ContentObjectHeader> &contentObject,
		Ptr<Packet> payload) {
	ndn::Name received_prefix = contentObject->GetName();
	NS_LOG_INFO (m_nodeName<<": Receiving Video ContentObject packet for " << received_prefix );

	//std::cout << "DATA received for name " << contentObject->GetName () << std::endl;

	/*int hopCount = -1;
	 ndn::FwHopCountTag hopCountTag;
	 if (payload->RemovePacketTag (hopCountTag))
	 {
	 hopCount = hopCountTag.Get ();
	 NS_LOG_DEBUG( "hopCount is " << hopCount );
	 }*/
}
void SyncVideoApp::OnNotification(const Ptr<const ndn::InterestHeader> &interest,
		Ptr<Packet> origPacket) {
	ndn::Name remote_FP;
	remote_FP = interest->GetName().GetLastComponent();
	NS_LOG_INFO(m_nodeName<<": Received Notification for "<<interest->GetName());
	//NS_LOG_DEBUG(m_nodeName<<": The content name is: "<< remote_FP);
	//ndn::Name new_interestPrefix;
	ndn::Name m_interestName = remote_FP;
	SendInterest(m_interestName);  // send new interest for content
}

/**
 * @brief Set type of frequency randomization
 * @param value Either 'none', 'uniform', or 'exponential'
 */
void SyncVideoApp::SetRandomize(const std::string &value) {
	if (m_random)
		delete m_random;
	if (value == "uniform") {
		m_random = new UniformVariable(0.0, 2 * 1.0 / m_frequency);
	} else if (value == "exponential") {
		m_random = new ExponentialVariable(1.0 / m_frequency,
				50 * 1.0 / m_frequency);
	} else if (value == "lognormal"){
			m_random = new LogNormalVariable(log(141350), log(132));
	}
	m_randomType = value;
}

/**
 * @brief Get type of frequency randomization
 * @returns either 'none', 'uniform', or 'exponential'
 */
std::string SyncVideoApp::GetRandomize() const {
	return m_randomType;
}


//////////////////////////////////////
//  	CSV File Read & Write  		//
//////////////////////////////////////

// Write to CSV file
int SyncVideoApp::WriteFile(std::string fname,
		std::map<ndn::Name, uint32_t> m_contentDict) {
	if (m_contentDict.empty())
		return 0;
	std::ofstream myfile;
	myfile.open(fname.c_str(), std::ios::out | std::ios::app);
	if (!myfile)
		return -1;

	for (std::map<ndn::Name, uint32_t>::iterator it = m_contentDict.begin();
			it != m_contentDict.end(); it++) {
		myfile << it->first << "," << it->second;
	}
	myfile.close();
	return 0;
}

// Read CSV file into map
std::map<ndn::Name, std::string> SyncVideoApp::ReadFile(std::string fname) {
	std::ifstream infile(fname.c_str());
	std::string line = "";
	std::map<ndn::Name, std::string> my_contentDict;
	while (getline(infile, line)) {
		std::vector<std::string> key_value;
		std::stringstream strstr(line);
		std::string word;
		ndn::Name temp_Name;
		while (getline(strstr, word, ',')) {
			key_value.push_back(word);
		}
		temp_Name(key_value[0]);
		my_contentDict[temp_Name] = key_value[1];
	}
	return my_contentDict;
}




} // ns3
